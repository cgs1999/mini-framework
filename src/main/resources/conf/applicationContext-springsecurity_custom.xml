<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 除登入页面及验证失败页面不需要保护，其他都需要拦截 -->
	<security:http pattern="/login" security="none" />
	<security:http pattern="/access/denied" security="none" />
	<security:http pattern="/login/failure" security="none" />
	<security:http pattern="/toLogin" security="none" />
	<security:http pattern="/verifyCode*" security="none" />
	<!-- 静态资源不需保护 -->
	<security:http pattern="/static/**" security="none" />

	<!--
		自定义登录过滤器，取消 auto-config
		为true配置（配置remember-me、logout）,disable-url-rewriting
		用来配置是否在地址栏显示jsessionid
	-->
	<security:http use-expressions="true" create-session="always"
		disable-url-rewriting="true" entry-point-ref="authenticationProcessingFilterEntryPoint"
		access-denied-page="/access/denied">
		<!--
			login-page:指定登录页面 （默认登录验证不能满足多参数、及GET请求，故通过自定义LoginFilter实现）
			<security:form-login login-page="/login"
			login-processing-url="/j_spring_security_check"
			always-use-default-target="true" default-target-url="/login/success"
			authentication-failure-url="/login/failure" />
		-->
		
		<!--
			设置cookie有效期是两年（60 * 60 * 24 * 365 * 2），默认为两周（auto-config为true时才起作用）
			<security:remember-me token-validity-seconds="63072000"
			user-service-ref="userDetailsService"
			key="duoduo-remKey-GVVxVQMjhNcccKYviQk7MocaWQnoJVz785KG" />
		-->

		<!--
			注销Sessions，并退出至登录页面
			（remember-me自定义时logout也需要自定义配置，不然session注销时不清cookie） <security:logout
			invalidate-session="true" logout-success-url="/login"
			logout-url="/j_spring_security_logout" />
			<security:session-management invalid-session-url="/login" />
		-->

		<!-- 自定义过滤器 -->
		<security:custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />
		<security:custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER" />
		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
		<security:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />

		<!-- session 管理 -->
		<security:session-management
			session-authentication-strategy-ref="concurrentSessionController"
			invalid-session-url="/toLogin" />
	</security:http>


	<!-- 登录验证器 -->
	<bean id="loginFilter"
		class="com.duoduo.security.filter.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录的action -->
		<property name="filterProcessesUrl" value="/j_spring_security_check" />
		<property name="postOnly" value="false" />
		<!-- 验证成功后的处理 -->
		<property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler" />
		<!-- 验证失败后的处理 -->
		<property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="sessionAuthenticationStrategy" ref="concurrentSessionController" />
	</bean>
	<bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/login/success"></property>
		<property name="alwaysUseDefaultTargetUrl" value="true"></property>
	</bean>
	<bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/login/failure"></property>
	</bean>


	<!-- remember me功能 -->
	<bean id="rememberMeFilter"
		class="com.duoduo.security.filter.MyRememberMeAuthenticationFilter">
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>
	<bean id="rememberMeServices"
		class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="myUserDetailsService" />
		<property name="alwaysRemember" value="false" />
		<property name="tokenValiditySeconds" value="63072000" />
		<property name="key" value="duoduo-framework-remKey-GVVxVQMjhNcccKYviQk7MocaWQnoJVz875KG" />
	</bean>
	<bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<property name="key" value="duoduo-framework-remKey-GVVxVQMjhNcccKYviQk7MocaWQnoJVz875KG" />
	</bean>

	<!-- logout 功能 -->
	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg ref="logoutSuccessHandler" />
		<constructor-arg>
			<list>
				<bean ref="rememberMeServices"></bean>
				<bean ref="rememberMeServices"></bean>
			</list>
		</constructor-arg>
	</bean>
	<bean id="logoutSuccessHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/login"></property>
		<property name="alwaysUseDefaultTargetUrl" value="true"></property>
	</bean>
	<bean id="securityContextLogoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="true" />
	</bean>

	<!-- session 管理 -->
	<bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/toLogin" />
	</bean>


	<bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<bean id="concurrentSessionController"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<property name="exceptionIfMaximumExceeded"
			value="false" />
		<property name="maximumSessions" value="-1" />
	</bean>


	<!-- 验证配置 ， 认证管理器，实现用户认证的入口 -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="rememberMeAuthenticationProvider" />
		<security:authentication-provider
			ref="daoAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="myUserDetailsService" />
		<property name="hideUserNotFoundExceptions"
			value="false" />
	</bean>
	<!--
		一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
		我们的所有控制将在这三个类中实现
	-->
	<bean id="myFilter"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource" ref="securityMetadataSource" />
	</bean>
	<!-- 用户-权限，资源-权限 验证暂时没有涉及数据库操作 -->
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<bean id="accessDecisionManager"
		class="com.duoduo.security.core.MyAccessDecisionManager">
	</bean>
	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<bean id="securityMetadataSource"
		class="com.duoduo.security.core.MyInvocationSecurityMetadataSource">
		<constructor-arg name="sqlMapClient" ref="sqlMapClient"/>
	</bean>

	<!-- 切入点 -->
	<bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<!-- 请求资源无权限默认转向至登录页面 -->
		<property name="loginFormUrl" value="/login"></property>
	</bean>

</beans>
